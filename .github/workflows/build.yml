name: Build EXE (Suite + Converter + Orders)

on:
  workflow_dispatch:
  push:
    paths:
      - main_app.py
      - timesheet_transformer.py
      - SpecialOrders.py
      - assets_logo.py
      - BudgetAnalyzer.py. 
      - requirements.txt
      - icon.ico
      - icon2.ico
      - .github/workflows/build.yml

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Clean previous build folders
        shell: pwsh
        run: |
          if (Test-Path dist)  { Remove-Item -Recurse -Force dist }
          if (Test-Path build) { Remove-Item -Recurse -Force build }

      - name: Ensure assets_logo.py (generate from RAW logo if missing)
        shell: pwsh
        run: |
          $rawUrl = "https://raw.githubusercontent.com/alekseyvz-dotcom/TimesheetTransformer/main/logo.png"
          if (-not (Test-Path "assets_logo.py")) {
            Write-Host "assets_logo.py not found — generating from RAW URL"
            try {
              $tmp = Join-Path $env:TEMP "logo.png"
              Invoke-WebRequest -Uri $rawUrl -OutFile $tmp -UseBasicParsing
              $bytes = [System.IO.File]::ReadAllBytes($tmp)
              $b64 = [System.Convert]::ToBase64String($bytes)
              $content = 'LOGO_BASE64 = """' + "`n" + $b64 + "`n" + '"""' + "`n"
              Set-Content -Path "assets_logo.py" -Value $content -Encoding UTF8
              Write-Host "assets_logo.py generated"
            } catch {
              Write-Warning "Cannot fetch logo: $($_.Exception.Message)"
              $tiny = 'LOGO_BASE64 = "' + 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/w8AAn8B9w3G2kIAAAAASUVORK5CYII=' + '"' + "`n"
              Set-Content -Path "assets_logo.py" -Value $tiny -Encoding UTF8
            }
          } else {
            Write-Host "assets_logo.py already exists — keeping repository version"
          }

      - name: Show assets_logo.py head
        shell: pwsh
        run: |
          Get-Content assets_logo.py -TotalCount 3

      - name: Build TabelSuite (main menu, windowed)
        shell: pwsh
        run: |
          if (Test-Path "icon.ico") {
            pyinstaller -F -w --clean --hidden-import=tkinter --hidden-import=assets_logo -i icon.ico -n TabelSuite main_app.py
          } else {
            Write-Host "icon.ico not found: building TabelSuite without custom icon"
            pyinstaller -F -w --clean --hidden-import=tkinter --hidden-import=assets_logo -n TabelSuite main_app.py
          }

      - name: Build TabelConverter (converter, windowed)
        shell: pwsh
        run: |
          if (Test-Path "icon2.ico") {
            pyinstaller -F -w --clean --hidden-import=tkinter -i icon2.ico -n TabelConverter timesheet_transformer.py
          } else {
            Write-Host "icon2.ico not found: building TabelConverter without custom icon"
            pyinstaller -F -w --clean --hidden-import=tkinter -n TabelConverter timesheet_transformer.py
          }

      - name: Build SpecialOrders (orders module, windowed)
        shell: pwsh
        run: |
          if (Test-Path "icon2.ico") {
            pyinstaller -F -w --clean --hidden-import=tkinter -i icon2.ico -n SpecialOrders SpecialOrders.py
          } else {
            Write-Host "icon2.ico not found: building SpecialOrders without custom icon"
            pyinstaller -F -w --clean --hidden-import=tkinter -n SpecialOrders SpecialOrders.py
          }

      - name: Build BudgetAnalyzer (windowed)
        shell: pwsh
        run: |
          if (Test-Path "icon2.ico") {
            pyinstaller -F -w --clean --hidden-import=tkinter -i icon2.ico -n BudgetAnalyzer BudgetAnalyzer.py
          } else {
            Write-Host "icon2.ico not found: building BudgetAnalyzer without custom icon"
            pyinstaller -F -w --clean --hidden-import=tkinter -n BudgetAnalyzer BudgetAnalyzer.py
          }

      - name: List dist
        shell: pwsh
        run: Get-ChildItem -Recurse dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TabelSuite_Pack
          path: |
            dist/TabelSuite.exe
            dist/TabelConverter.exe
            dist/SpecialOrders.exe
            dist/BudgetAnalyzer.exe
          if-no-files-found: error
          retention-days: 14
